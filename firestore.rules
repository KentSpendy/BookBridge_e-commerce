rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // 📚 Book Posts (matches book_detail_screen.dart)
    match /bookPosts/{bookId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null;
    }

    // 💸 Transactions (matches purchase flows)
    match /transactions/{transactionId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null &&
                   (request.auth.uid == resource.data.buyerId || 
                    request.auth.uid == resource.data.sellerId);
      allow update: if request.auth != null &&
                   request.auth.uid == resource.data.sellerId &&
                   request.resource.data.status == 'accepted' &&
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']);
    }

    // 👤 User Profiles (matches auth_service.dart)
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null &&
                                   request.auth.uid == userId;
    }

    // 💬 Chat System (matches chat_service.dart)
    match /chats/{chatId} {
      allow list: if false;

      // ✅ Allow safe single-document queries (e.g., doc(chatId).get())
      allow get: if request.auth != null;

      // ✅ Allow chat creation only if the authenticated user is in participants
      allow create: if request.auth != null &&
                    request.resource.data.participants is list &&
                    request.auth.uid in request.resource.data.participants;

      // ✅ Allow read/update only if user is in participants and doc exists
      allow read, update: if request.auth != null &&
                          resource.data != null &&
                          resource.data.keys().hasAny(['participants']) &&
                          resource.data.participants is list &&
                          request.auth.uid in resource.data.participants;

      // 💬 Chat messages
      match /messages/{messageId} {
        allow read: if request.auth != null &&
                    request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;

        allow create: if request.auth != null &&
                      request.auth.uid == request.resource.data.senderId &&
                      request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;

        allow update: if request.auth != null &&
                      request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'readBy']);
      }
    }

    // 📥 User Chat Lists (matches chat_list_screen.dart)
    match /userChats/{userId}/chats/{chatId} {
      // ✅ Only allow the owner to read their list
      allow read: if request.auth != null &&
                  request.auth.uid == userId;

      // ✅ Allow writes if:
      // - The user is writing to their own list, or
      // - They are the `otherUserId` in the chat entry (i.e., a participant adding the chat)
      allow write: if request.auth != null &&
                   (
                     request.auth.uid == userId ||
                     request.resource.data.otherUserId == request.auth.uid
                   );
    }

    // 🔔 FCM Tokens (matches auth_service.dart)
    match /fcm_tokens/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                   request.auth.uid == userId;
    }

    // ⚙️ Configuration (e.g. FCM server key)
    match /config/{document} {
      allow read: if request.auth != null;
    }
  }
}
